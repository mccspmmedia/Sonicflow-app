import Foundation
import AuthenticationServices

class AppleAuthManager {
    static let shared = AppleAuthManager()

    private let userIdKey = "appleAuthorizedUserIdKey"
    private let loginStatusKey = "isLoggedIn"

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–∏ userID ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Ö–æ–¥–∞
    var isSignedIn: Bool {
        UserDefaults.standard.string(forKey: userIdKey) != nil
    }

    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç userID –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Apple
    func store(userID: String) {
        UserDefaults.standard.set(userID, forKey: userIdKey)
        UserDefaults.standard.set(true, forKey: loginStatusKey)
        print("üì¶ Saved Apple User ID: \(userID)")
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Apple ID –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    func checkCredentialStateAndUpdateStatus() {
        guard let userID = UserDefaults.standard.string(forKey: userIdKey) else {
            print("‚ÑπÔ∏è No saved Apple user ID found")
            setLoggedOut()
            return
        }

        let provider = ASAuthorizationAppleIDProvider()
        provider.getCredentialState(forUserID: userID) { state, _ in
            DispatchQueue.main.async {
                switch state {
                case .authorized:
                    print("‚úÖ Apple credential still valid")
                    break // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                case .revoked, .notFound:
                    print("‚ö†Ô∏è Apple credential revoked or not found")
                    self.setLoggedOut()
                default:
                    print("‚ÑπÔ∏è Apple credential state: \(state.rawValue)")
                    self.setLoggedOut()
                }
            }
        }
    }

    /// –í–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∞ —Å —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MainTabView)
    func checkCredentialState(completion: @escaping (ASAuthorizationAppleIDProvider.CredentialState) -> Void) {
        guard let userID = UserDefaults.standard.string(forKey: userIdKey) else {
            completion(.notFound)
            return
        }

        let provider = ASAuthorizationAppleIDProvider()
        provider.getCredentialState(forUserID: userID) { state, _ in
            DispatchQueue.main.async {
                completion(state)
            }
        }
    }

    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
    func signOut() {
        setLoggedOut()
        print("üëã Apple User ID and login status removed")
    }

    /// –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    func deleteAccount() {
        signOut()
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }

    /// –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
    private func setLoggedOut() {
        UserDefaults.standard.removeObject(forKey: userIdKey)
        UserDefaults.standard.set(false, forKey: loginStatusKey)
        NotificationCenter.default.post(name: .didLogOut, object: nil)
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
extension Notification.Name {
    static let didLogOut = Notification.Name("didLogOut")
}
