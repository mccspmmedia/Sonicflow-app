import Foundation
import AuthenticationServices

class AppleAuthManager {
    static let shared = AppleAuthManager()

    private let userIdKey = "appleAuthorizedUserIdKey"
    private let loginStatusKey = "isLoggedIn"

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–∏ userID ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Ö–æ–¥–∞
    var isSignedIn: Bool {
        UserDefaults.standard.string(forKey: userIdKey) != nil
    }

    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç userID –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Apple
    func store(userID: String) {
        UserDefaults.standard.set(userID, forKey: userIdKey)
        UserDefaults.standard.set(true, forKey: loginStatusKey)
        print("üì¶ Saved Apple User ID: \(userID)")
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Apple ID —á–µ—Ä–µ–∑ API Apple
    func checkCredentialState(completion: @escaping (ASAuthorizationAppleIDProvider.CredentialState) -> Void) {
        guard let userID = UserDefaults.standard.string(forKey: userIdKey) else {
            completion(.notFound)
            return
        }

        let provider = ASAuthorizationAppleIDProvider()
        provider.getCredentialState(forUserID: userID) { state, _ in
            DispatchQueue.main.async {
                completion(state)
            }
        }
    }

    /// –£–¥–∞–ª—è–µ—Ç userID –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    func signOut() {
        UserDefaults.standard.removeObject(forKey: userIdKey)
        UserDefaults.standard.set(false, forKey: loginStatusKey)
        print("üëã Apple User ID removed")
    }

    /// –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    func deleteAccount() {
        signOut()
    }
}
